// Solution:            ChkAdmin
// Project:              src
// FileName:          ChkAdmin.c
// 
// Written by:       Doron Barzilay (DoronB)
// Creation date:  2022-06-20 12:13
// Last update:     2022-06-22 17:32

// Re Sharper dis able CppCl angTidyClangDiagnosticStrictPrototypes
#ifdef _MSC_VER

#define _CRT_SECURE_NO_WARNINGS

#endif // #ifdef _MSC_VER …

#ifdef _DEBUG

#define TEST_ARGS

#endif // #ifdef _DEBUG …

#pragma region Includes

#include <malloc.h>
#include <stdio.h>
#include <conio.h>
#include <Windows.h>

#pragma endregion Includes

#pragma comment (lib,"Advapi32.lib")

#define MAX_STR_LENGTH		512
#define DEFAULT_VERBOSE		FALSE
#define DEFAULT_PAUSE		FALSE

#pragma region Help text

static const char* const HELP_TEXT = /* "\r\n"*/
"Usage (command line argument can start with either '--', '-' or '/')"
"\r\n"
"\r\n"
"syntax:	\"%s\" [-|--|/]<option>\r\n"
"\r\n"
"	/? | -h | /h | --help    | /help    - Help\r\n"
"	     -v | /v | --verbose | /verbose - Verbose output and pause (depnds on 'p')\r\n"
"	     -p | /p | --pause   | /pause   - Wait for a keypress on end\r\n"
"\r\n"
"Exit codes:\r\n"
"	 0	- ADMIN\r\n"
"	 1	- Non-ADMIN\r\n"
"	-1	- Help shown\r\n"
"	-2	- Invalid argument given\r\n"
"	-3	- Unknown SID\r\n"
"	-4	- User can't check membership\r\n";

#pragma endregion Help text

#pragma region  trim(char* string) function

char* trim(char* string)
{
	char* ptr = NULL;

	while (*string == ' ' || *string == '	' || *string == '\r' || *string == '\n')
	{
		string++;
	} // while (*string == ' ' || *string == '	' || *string == '\r' || *string == '\n') …

	ptr = string + strlen(string) - 1; // jump to the last char (-1 because '\0')

	while (*ptr == ' ' || *ptr == '\t' || *ptr == '\r' || *ptr == '\n')
	{
		*ptr = '\0';
		ptr--;
	} // while (*ptr == ' ' || *ptr == '\t' || *ptr == '\r' || *ptr == '\n') …

	return string; // return pointer to the modified start 
}

#pragma endregion  trim(char* string) function

#pragma region pause() function

int pause(int exitCode, BOOL bVerbose, BOOL bPause)
{
	if (/*!*/bVerbose && bPause)
	{
		int chRes = 0;
		char msg[MAX_STR_LENGTH] = "";

		switch (exitCode)
		{
		case 0:
		{
			sprintf(msg, "\r\nExit code: %d (%s), Press any key to close this window . . .", exitCode, "ADMIN");

			break;
		} // case 0: …
		case 1:
		{
			sprintf(msg, "\r\nExit code: %d (%s), Press any key to close this window . . .", exitCode, "Non-ADMIN");

			break;
		} // case 1: …
		case -1:
		{
			sprintf(msg, "\r\nExit code: %d (%s), Press any key to close this window . . .", exitCode, "Help shown");

			break;
		} // case -1: …
		case -2:
		{
			sprintf(msg, "\r\nExit code: %d (%s), Press any key to close this window . . .", exitCode, "Invalid argument given");

			break;
		} // case -2: …
		case -3:
		{
			sprintf(msg, "\r\nExit code: %d (%s), Press any key to close this window . . .", exitCode, "Unknown SID");

			break;
		} // case -3: …
		case -4:
		{
			sprintf(msg, "\r\nExit code: %d (%s), Press any key to close this window . . .", exitCode, "User can't check membership");

			break;
		} // case -4: …
		} // switch (exitCode) …

		puts(msg);

		while (!_kbhit())
		{
			__noop;
		} // while (!_kbhit()) …

		do
		{
			chRes = _getch();
		} while (!chRes);// do …

		return chRes;
	} // if (/*!*/verbose && pause) …

	return 0;
}

#pragma endregion pause() function

#ifndef TEST_ARGS

int main(int argc, char* argv[])
{
	char* arg = NULL;

	char invelidArgs[MAX_STR_LENGTH] = "Invalid arguments:	";
	char helpText[MAX_STR_LENGTH] = "";

	BOOL bHelp = FALSE;
	BOOL bVerbose = DEFAULT_VERBOSE;
	BOOL bPause = DEFAULT_PAUSE;
	BOOL bInvalid = FALSE;

	DWORD cbSid = SECURITY_MAX_SID_SIZE;
	PSID pSid = NULL;
	BOOL isAdmin = FALSE;

	pSid = _malloca(cbSid);

#pragma region Parse argument list argv

	if (argc > 1)
	{

		for (int i = 1; i < argc; i++)
		{
			arg = _strlwr(argv[i]);

			if (_stricmp(arg, "--help") == 0 || _stricmp(arg, "/help") == 0 ||
				_stricmp(arg, "-h") == 0 || _stricmp(arg, "/h") == 0 ||
				_stricmp(arg, "-?") == 0 || _stricmp(arg, "/?") == 0)
			{
				bHelp |= TRUE;
				break;
			}// if (_stricmp(arg, "--help") == 0 || _stricmp(arg, "/help") || …

			if (_stricmp(arg, "--verbose") == 0 || _stricmp(arg, "/verbose") == 0 ||
				_stricmp(arg, "-v") == 0 || _stricmp(arg, "/v") == 0)
			{
				bVerbose |= TRUE;
			} // if (_stricmp(arg, "--verbose") == 0 || _stricmp(arg, "/verbose") == 0 || …
			else
			{
				if (_stricmp(arg, "--pause") == 0 || _stricmp(arg, "/pause") == 0 ||
					_stricmp(arg, "-p") == 0 || _stricmp(arg, "/p") == 0)
				{
					bPause |= TRUE;
				} // if (_stricmp(arg, "--pause") == 0 || _stricmp(arg, "/pause") == 0 || …
				else
				{
					bInvalid &= bVerbose;
					bInvalid |= TRUE;
					strcat(invelidArgs, arg);

					strcat(invelidArgs, " ");
				} // if (_stricmp(arg, "--pause") == 0 || _stricmp(arg, "/pause") == 0 || … else
			} // if (_stricmp(arg, "--verbose") == 0 || _stricmp(arg, "/verbose") == 0 || … else


		} // for (int i = 1; i < argc; i++)

		trim(invelidArgs);
		strcat(invelidArgs, "\r\n");

	} // if (argc > 1)

	if (bHelp)
	{
		sprintf(helpText, HELP_TEXT, argv[0]);
		fprintf_s(stderr, "%s", helpText);
		fprintf_s(stderr, "\r\nExit code is: %d", -1);

		pause(-1, bVerbose, bPause);

		exit(-1);
	} // if (bHelp) …

	if (/*!*/bVerbose && bInvalid)
	{
		sprintf(helpText, HELP_TEXT, argv[0]);
		strcat(invelidArgs, helpText);

		fprintf_s(stderr, "%s", invelidArgs/*helpText*/);
		// fprintf_s(stderr, "%s", invelidArgs/*helpText*/);

		if (bInvalid)
		{
			// fprintf_s(stderr, "%s", "\r\nERROR:	Invalid argument(s) given\r\n");

			pause(-2, bVerbose, bPause);
			exit(-2);
		} // if (bInvalid) …

		pause(-1, bVerbose, bPause);
		exit(-1);
	} // if (/*!*/bVerbose && bInvalid) …
	//else
	//{
	//	exit(-2);
	//} // if (/*!*/bVerbose && bInvalid) … else

#pragma endregion Parse argument list argv

	if (!CreateWellKnownSid(WinBuiltinAdministratorsSid, NULL, pSid, &cbSid))
	{
		if (/*!*/bVerbose)
		{
			fprintf(stderr, "CreateWellKnownSid: error %lu\r\nERROR:	Unknown SID\r\n", GetLastError());
		} // if (/*!*/bVerbose) …

		pause(-3, bVerbose, bPause);

		exit(-3);
	} // if (!CreateWellKnownSid(WinBuiltinAdministratorsSid, NULL, pSid, &cbSid)) …

	if (!CheckTokenMembership(NULL, pSid, &isAdmin))
	{
		if (/*!*/bVerbose)
		{
			fprintf(stderr, "CheckTokenMembership: error %lu\nERROR:	User can't check membership\r\n", GetLastError());
		} // if (/*!*/bVerbose) …

		pause(-4, bVerbose, bPause);

		exit(-4);
	} // if (!CheckTokenMembership(NULL, pSid, &isAdmin)) …

	if (/*!*/bVerbose)
	{
		puts(isAdmin ? "Admin" : "Non-admin");
	} // if (/*!*/bVerbose) …

	pause(!isAdmin, bVerbose, bPause);

	return !isAdmin;
}

#else

#pragma region string_array_count(char* const* argv) function

int string_array_count(char* const* argv)
{
	int i = 0;

	while (argv[i] != NULL)
	{
		i++;
	} // while (argv[i] != NULL) …

	return i;
}

#pragma endregion string_array_count(char* const* argv) function

int main(int argcm, char* argvm[])
{
	char* arg = NULL;

	char invelidArgs[MAX_STR_LENGTH] = "Invalid arguments:	";
	char helpText[MAX_STR_LENGTH] = "";

	BOOL bHelp = FALSE;
	BOOL bVerbose = DEFAULT_VERBOSE;
	BOOL bPause = DEFAULT_PAUSE;
	BOOL bInvalid = FALSE;

	DWORD cbSid = SECURITY_MAX_SID_SIZE;
	PSID pSid = NULL;
	BOOL isAdmin = FALSE;

	char* const argv[] = {
		argvm[0],
		//"-h",
		"-t",
		"-p",
		"--verbose",
		NULL
	};

	const int argc = string_array_count(argv);

	pSid = _malloca(cbSid);

#pragma region Parse argument list argv

	if (argc > 1)
	{

		for (int i = 1; i < argc; i++)
		{
			arg = _strlwr(argv[i]);

			if (_stricmp(arg, "--help") == 0 || _stricmp(arg, "/help") == 0 ||
				_stricmp(arg, "-h") == 0 || _stricmp(arg, "/h") == 0 ||
				_stricmp(arg, "-?") == 0 || _stricmp(arg, "/?") == 0)
			{
				bHelp |= TRUE;
				break;
			}// if (_stricmp(arg, "--help") == 0 || _stricmp(arg, "/help") || …

			if (_stricmp(arg, "--verbose") == 0 || _stricmp(arg, "/verbose") == 0 ||
				_stricmp(arg, "-v") == 0 || _stricmp(arg, "/v") == 0)
			{
				bVerbose |= TRUE;
			} // if (_stricmp(arg, "--verbose") == 0 || _stricmp(arg, "/verbose") == 0 || …
			else
			{
				if (_stricmp(arg, "--pause") == 0 || _stricmp(arg, "/pause") == 0 ||
					_stricmp(arg, "-p") == 0 || _stricmp(arg, "/p") == 0)
				{
					bPause |= TRUE;
				} // if (_stricmp(arg, "--pause") == 0 || _stricmp(arg, "/pause") == 0 || …
				else
				{
					bInvalid &= bVerbose;
					bInvalid |= TRUE;
					strcat(invelidArgs, arg);

					strcat(invelidArgs, " ");
				} // if (_stricmp(arg, "--pause") == 0 || _stricmp(arg, "/pause") == 0 || … else
			} // if (_stricmp(arg, "--verbose") == 0 || _stricmp(arg, "/verbose") == 0 || … else


		} // for (int i = 1; i < argc; i++)

		trim(invelidArgs);
		strcat(invelidArgs, "\r\n");

	} // if (argc > 1)

	if (bHelp)
	{
		sprintf(helpText, HELP_TEXT, argv[0]);
		fprintf_s(stderr, "%s", helpText);
		fprintf_s(stderr, "\r\nExit code is: %d", -1);

		pause(-1, bVerbose, bPause);

		exit(-1);
	} // if (bHelp) …

	if (/*!*/bVerbose && bInvalid)
	{
		sprintf(helpText, HELP_TEXT, argv[0]);
		strcat(invelidArgs, helpText);

		fprintf_s(stderr, "%s", invelidArgs/*helpText*/);
		// fprintf_s(stderr, "%s", invelidArgs/*helpText*/);

		if (bInvalid)
		{
			// fprintf_s(stderr, "%s", "\r\nERROR:	Invalid argument(s) given\r\n");

			pause(-2, bVerbose, bPause);
			exit(-2);
		} // if (bInvalid) …

		pause(-1, bVerbose, bPause);
		exit(-1);
	} // if (/*!*/bVerbose && bInvalid) …
	//else
	//{
	//	exit(-2);
	//} // if (/*!*/bVerbose && bInvalid) … else
#pragma endregion Parse argument list argv

	if (!CreateWellKnownSid(WinBuiltinAdministratorsSid, NULL, pSid, &cbSid))
	{
		if (/*!*/bVerbose)
		{
			fprintf(stderr, "CreateWellKnownSid: error %lu\r\nERROR:	Unknown SID\r\n", GetLastError());
		} // if (/*!*/bVerbose) …

		pause(-3, bVerbose, bPause);

		exit(-3);
	} // if (!CreateWellKnownSid(WinBuiltinAdministratorsSid, NULL, pSid, &cbSid)) …

	if (!CheckTokenMembership(NULL, pSid, &isAdmin))
	{
		if (/*!*/bVerbose)
		{
			fprintf(stderr, "CheckTokenMembership: error %lu\nERROR:	User can't check membership\r\n", GetLastError());
		} // if (/*!*/bVerbose) …

		pause(-4, bVerbose, bPause);

		exit(-4);
	} // if (!CheckTokenMembership(NULL, pSid, &isAdmin)) …

	if (/*!*/bVerbose)
	{
		puts(isAdmin ? "Admin" : "Non-admin");
	} // if (/*!*/bVerbose) …

	pause(!isAdmin, bVerbose, bPause);

	return !isAdmin;
}
#endif